import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Define the input shape
input_shape = (49, 49, 1)

# Define the number of classes
num_classes = 6

# Define the data generators for training and validation
train_datagen = ImageDataGenerator(rescale=1./255,
                                   rotation_range=10,
                                   zoom_range=0.1,
                                   width_shift_range=0.1,
                                   height_shift_range=0.1)
val_datagen = ImageDataGenerator(rescale=1./255)

# Define the paths to the training and validation data directories
train_dir = 'asl_num_train'
val_dir = 'asl_num_val'


# Define the batch size
batch_size = 32

# Define the model
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu', input_shape=(49, 49, 1)),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),
    tf.keras.layers.Conv2D(128, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Conv2D(256, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(num_classes, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])
print("Compiled Model...")

# Train the model
train_generator = train_datagen.flow_from_directory(train_dir,
                                                    target_size=(49,49),
                                                    color_mode='grayscale',
                                                    batch_size=batch_size,
                                                    class_mode='categorical')

print(train_generator.classes)

print("train generated")
val_generator = val_datagen.flow_from_directory(val_dir,
                                                target_size=(49,49),
                                                color_mode='grayscale',
                                                batch_size=batch_size,
                                                class_mode='categorical')
print("val generated")
print(val_generator.classes)


# for i in range 20:
#     model.fit(train_generator,
#           epochs=i,
#           validation_data=val_generator)



num_epochs = 20
for i in range(num_epochs):
    print(f"Training epoch {i+1}/{num_epochs}")
    history = model.fit(train_generator, epochs=i, validation_data=val_generator)


print("Model-fit ..")



# Save the model
model.save('sign_model.h5')
 
print("Model_Trianed")